name: Code Coverage

on:
  push:
    branches: [main]
    paths-ignore:
      - CODEOWNERS
      - requirements.txt
      - LICENSE.txt
      - .pre-commit-config.yaml
      - '**/*.md'
      - '**/*.yml'
  pull_request:
    branches: [main]
    paths-ignore:
      - CODEOWNERS
      - requirements.txt
      - LICENSE.txt
      - .pre-commit-config.yaml
      - '**/*.md'
      - '**/*.yml'

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Debug

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Lcov
        shell: bash
        # Lcov 2.0 is missing a dependency on DateTime so manually install for now.
        run: |
          wget https://github.com/linux-test-project/lcov/archive/refs/tags/v2.0.tar.gz
          tar -xvf v2.0.tar.gz
          cd lcov-2.0
          sudo make install

      # Lcov 2.0 is missing a number of dependencies (DateTime and Capture::Tiny) so manually install for now.
      # When this is addressed in Lcov then this should be removed.
      - name: Install Missing Lcov Dependencies
        shell: bash
        run: |
          sudo perl -MCPAN -e 'install Capture::Tiny'

          sudo apt-get install libdatetime-perl

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DENABLE_CODE_COVERAGE=1

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Fastcov
        # Run Fastcov target to collect coverage information.
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target coverage

      - name: Lcov
        # Run LCov target to generate code coverage report
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target coverage-lcov

      - name: Cobertura
        # Run Cobertura target to generate code coverage report in XML
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} --target coverage-cobertura

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          files: ${{github.workspace}}/build/coverage/cobertura_coverage.xml
          fail_ci_if_error: true
          verbose: true
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
